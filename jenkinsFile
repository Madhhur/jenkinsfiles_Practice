@Library('My_Shared') _

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    def config = [
                        url: 'https://github.com/Madhhur/testing.git',
                        branch: 'main',
                        credentialId: 'Madhhur'
                    ]
                    gitCheckout(config)

                    sh '''
                        echo "Checkout completed"
                        pwd
                        ls -lrt
                        df -h
                    '''
                }
            }
        }

        // stage('SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('sonar_server') { 
        //             sh '/opt/sonar/latest/bin/sonar-scanner -Dsonar.projectKey=gearX_product_backend -Dsonar.sources=.'
        //         }
        //     }
        // }

        // stage('Sonar Quality Gate') {
        //     steps {
        //          timeout(time: 3, unit: 'MINUTES') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }

        stage('Trivy Scan') {
            steps {
                echo "Scanning the code"
                sh 'echo "Build step executed"'
            }
        }
         stage('Docker Build, Trivy scan & Push using plugin') {
            environment {
                IMAGE_NAME = 'madhhur168/gearx_product_backend'
                IMAGE_TAG = 'latest'
                DOCKERFILE_SRC = 'Dockerfile'
                DOCKER_CREDS = 'docker_hub'
            }
            steps {
                script {
                    docker.withRegistry('', "${DOCKER_CREDS}") {
                        appImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "-f ${DOCKERFILE_SRC} .")
                        appImage.push()
                    }

                    sh '''
              trivy image --severity CRITICAL --scanners vuln --format html -o trivy_image_scan_report.html "$IMAGE_NAME:$IMAGE_TAG"
ls trivy_image_scan_report.html

                    '''

                    publishHTML (target : [
                        reportName: 'Trivy Vulnerability Image Report',
                        reportDir: '.',
                        reportFiles: 'trivy_image_scan_report.html',
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                    ])
                }
            }
        }

    }

    // post {
    //     always {
    //         echo "========always========"
    //        node {
    //         cleanWs()
    //     }
    //     }
        success {
            echo "========pipeline executed successfully ========"
        }
    }
}
